var documenterSearchIndex = {"docs": [

{
    "location": "index.html#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": ""
},

{
    "location": "index.html#Highlights.jl-1",
    "page": "Home",
    "title": "Highlights.jl",
    "category": "section",
    "text": "A source code highlighter for Julia."
},

{
    "location": "index.html#Introduction-1",
    "page": "Home",
    "title": "Introduction",
    "category": "section",
    "text": "This package provides a collection of source code lexers for various languages and markup formats and a selection of themes that can be used to customise the style of the formatted source code. Additional lexer definitions are straightforward to add and are based on the regular expression lexing mechanism used by Pygments."
},

{
    "location": "index.html#Installation-1",
    "page": "Home",
    "title": "Installation",
    "category": "section",
    "text": "Highlights is not yet a registered package and so must be installed viaPkg.clone(\"https://github.com/JuliaDocs/Highlights.jl\")The package has no dependencies other than Julia (0.4 and up) itself."
},

{
    "location": "index.html#Usage-1",
    "page": "Home",
    "title": "Usage",
    "category": "section",
    "text": "See the User Guide for an introduction to using the package;\nthe Theme Guide will explain how to add new themes;\nand the Lexer Guide will walk you through writing new lexer definitions."
},

{
    "location": "man/guide.html#",
    "page": "User Guide",
    "title": "User Guide",
    "category": "page",
    "text": ""
},

{
    "location": "man/guide.html#User-Guide-1",
    "page": "User Guide",
    "title": "User Guide",
    "category": "section",
    "text": "So how do we highlight source code using the Highlights package?Firstly we import the package – assuming it has already been installed following the guidelines found in Installation.using HighlightsThis will make several names available to us for use:highlight colourises and formats strings;\nstylesheet prints out style definitions;\nthe Themes module provides a selection of theme definitions;\nand the Lexers module provides a collection of lexer definitions.Next we need a String to highlight. For this example we will be using the code sample from The Julia Language website.source =\n    \"\"\"\n    function mandel(z)\n        c = z\n        maxiter = 80\n        for n = 1:maxiter\n            if abs(z) > 2\n                return n-1\n            end\n            z = z^2 + c\n        end\n        return maxiter\n    end\n\n    function randmatstat(t)\n        n = 5\n        v = zeros(t)\n        w = zeros(t)\n        for i = 1:t\n            a = randn(n,n)\n            b = randn(n,n)\n            c = randn(n,n)\n            d = randn(n,n)\n            P = [a b c d]\n            Q = [a b; c d]\n            v[i] = trace((P.'*P)^4)\n            w[i] = trace((Q.'*Q)^4)\n        end\n        std(v)/mean(v), std(w)/mean(w)\n    end\n    \"\"\"\nnothing # hideTo highlight source we pass it to highlight along with the output stream, the required output format, the lexer, and, optionally, the theme.open(\"source.html\", \"w\") do stream\n    highlight(stream, MIME(\"text/html\"), source, Lexers.JuliaLexer)\nendThis will print the highlighted version of source to source.html using the JuliaLexer definition and the DefaultTheme. We can also output LaTeX formatted text by using MIME(\"text/latex\") instead.Note though that at this point we have not included any style information needed to colourise and typeset the text that highlight has printed to the file. For that we need to call stylesheet first as follows:open(\"source.html\", \"w\") do stream\n    stylesheet(stream, MIME(\"text/html\"), Lexers.JuliaLexer)\n    highlight(stream, MIME(\"text/html\"), source, Lexers.JuliaLexer)\nendThe highlighted version of source is available from here.stylesheet is passed most of the same information that highlight is aside from the source. We need to pass JuliaLexer to it since otherwise stylesheet will not know which tokens could possibly be generated by the lexer.note: Note\nThe above example will not produce a complete HTML page. No <html>, <head>, or <body> are printed. This is left to the user to decide what approach would suit their usecase best.Also note that if you would like to print the stylesheet to a .css file rather than to the same index.html then you may use:open(\"theme.css\", \"w\") do stream\n    stylesheet(stream, MIME(\"text/css\"), Lexers.JuliaLexer)\nendThat's all there is to it. Have a look at the Theme Guide and Lexer Guide if you would like to define your own themes and lexers. Please consider contributing any that you write back to the package so that all users can benefit from them – no lexer or theme is too obscure to include in Highlights!"
},

{
    "location": "man/theme.html#",
    "page": "Theme Guide",
    "title": "Theme Guide",
    "category": "page",
    "text": ""
},

{
    "location": "man/theme.html#Theme-Guide-1",
    "page": "Theme Guide",
    "title": "Theme Guide",
    "category": "section",
    "text": "Under Construction..."
},

{
    "location": "man/lexer.html#",
    "page": "Lexer Guide",
    "title": "Lexer Guide",
    "category": "page",
    "text": ""
},

{
    "location": "man/lexer.html#Lexer-Guide-1",
    "page": "Lexer Guide",
    "title": "Lexer Guide",
    "category": "section",
    "text": "Under Construction..."
},

{
    "location": "lib/public.html#",
    "page": "Public Interface",
    "title": "Public Interface",
    "category": "page",
    "text": ""
},

{
    "location": "lib/public.html#Public-Interface-1",
    "page": "Public Interface",
    "title": "Public Interface",
    "category": "section",
    "text": "Under Construction..."
},

{
    "location": "lib/internals.html#",
    "page": "Package Internals",
    "title": "Package Internals",
    "category": "page",
    "text": ""
},

{
    "location": "lib/internals.html#Package-Internals-1",
    "page": "Package Internals",
    "title": "Package Internals",
    "category": "section",
    "text": "Under Construction..."
},

]}
